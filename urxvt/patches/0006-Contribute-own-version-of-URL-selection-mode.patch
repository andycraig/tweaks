From 3e849e52c7a5fec93d2537e59dd64ab571ffa51d Mon Sep 17 00:00:00 2001
From: Navarum <48705414+navarum@users.noreply.github.com>
Date: Sat, 21 Dec 2019 11:06:13 -0800
Subject: [PATCH 6/6] Contribute own version of URL selection mode

---
 src/perl/url-mode-patterns.pl | 108 ++++++
 src/perl/url-mode-select      | 689 ++++++++++++++++++++++++++++++++++
 2 files changed, 797 insertions(+)
 create mode 100644 src/perl/url-mode-patterns.pl
 create mode 100644 src/perl/url-mode-select

diff --git a/src/perl/url-mode-patterns.pl b/src/perl/url-mode-patterns.pl
new file mode 100644
index 00000000..524249f3
--- /dev/null
+++ b/src/perl/url-mode-patterns.pl
@@ -0,0 +1,108 @@
+# TODO:
+# - pattern for shell words
+# - match file names in quotes
+
+# NE 13 Jan 2017 - revised over past few weeks. added modes, and
+# improved URL recognition
+
+my $end_or_spaces = qr{($|\s{5,})};
+my $prolog_prompt_pat = qr{(?:^\?- )\s*(.*?)$end_or_spaces};
+my $r_prompt_pat = qr{(?:^|Browse.*)>\s*(.*?)$end_or_spaces};
+my $r_isearch_pat = qr{^\(.*reverse-i-search\).*?:\s*(.*)$end_or_spaces};
+# no more than 20 spaces before a shell command; this helps exclude $RPS1
+my $shell_err_code = qr{(?:\[[^\]]*\])};
+
+# NE 31 Oct 2018 sometimes this doesn't match, so changed ^ to
+# (?:\n|^),... but hard to reproduce
+my $shell_prompt_pat = qr{(?:\n|^)^$shell_err_code?[\$\#]\s{0,20}(.*?)$end_or_spaces};
+
+# File comes after =, :, or space; has at least one slash; no tilde
+# unless in front followed by name; first slash is not doubled (like
+# URL), doesn't start with dash. Maildir entries can have "," and "="
+# and ":"
+my $file_pat = qr{(?:[\s=:"]|^)((?:[.\w][.\w-]*|~\w*)?/[\w.-][/.\w,=@:-]*)};
+
+# also matches emails
+# no dot at end
+my $long_file_pat_noslash =
+  qr{(([.\w-+\@]{10,}[\w-+\@])(?(?{$^N =~ /\./})|(*FAIL)))};
+
+my $many_numbers = qr{[\d:A-Fa-f+-]{13,}};
+my $few_numbers = qr{\b[\d:A-Fa-f+-]{4,}\b};
+
+# NE 04 Jan 2017 old URL pattern (parens nesting not working)
+# my $url_pat = qr{\w+://(?:[\w.\@=+\%&~/?;#:'(-]|[)](?![.\s]))+};
+
+my $url_char = qr{[\w\-\@;\/?:&=%\$.+!*\x27,~#\\]};
+my $url_pat = qr{\w+://
+                  $url_char*
+            (?:
+                \($url_char*\)   # Allow a pair of matched parentheses
+                |                                    #
+                [\w\-\@;\/?:&=%\$+*~]                # exclude some trailing characters (heuristic)
+            )+
+}x;
+
+my $dom_char = qr{ [\w\d-] }x;
+# Popular TLDs. exclude file suffixes like .pl
+my $tld_pat = qr{com|org|net|int|edu|gov|mil|biz|us|uk|io|tv|ru|de|jp|br|it|in|fr|au|nl|cn|info|ua|eu|cu|gr|za|ro|ch|se|mx|tw|vn|hu|be|at|dk|pl};
+
+my $dom_pat = qr{
+(?: ^ | [\s(<\[] )
+    (
+        $dom_char+
+        (?:\.$dom_char+)*
+        \.($tld_pat)\b
+    )
+(?: $ | [\s)>\]] )
+}x;
+my $ip_pat = qr{ \d+(\.\d+){3,} }x;
+
+# original URL pattern
+# my $default =  qr{
+#             (?:https?://|ftp://|news://|mailto:|file://|\bwww\.)
+#             [\w\-\@;\/?:&=%\$.+!*\x27,~#]*
+#             (
+#                 \([\w\-\@;\/?:&=%\$.+!*\x27,~#]*\)   # Allow a pair of matched parentheses
+#                 |                                    #
+#                 [\w\-\@;\/?:&=%\$+*~]                # exclude some trailing characters (heuristic)
+#             )+
+#         }x;
+
+# line, omit trailing spaces
+my $line_pat = qr{^(.*?)\s*$};
+
+return {
+  mode_keys => {
+    P => "Prompt",
+    F => "File",
+    U => "URL",
+    L => "Line",
+    N => "Number"
+  },
+  mode_pats => [
+    Prompt => [
+      $prolog_prompt_pat,
+      $r_prompt_pat,
+      $r_isearch_pat,
+      $shell_prompt_pat
+        ],
+    URL => [
+      $url_pat,
+      $ip_pat,
+      $dom_pat
+        ],
+    File => [
+      $file_pat,
+      $long_file_pat_noslash,
+      $many_numbers # remove this?
+        ],
+    Line => [ $line_pat ],
+
+    # no sense in matching one or two digits since user could just
+    # remember them
+    Number => [ $few_numbers ]
+  ]
+};
+#return ($file_pat);
+#return $prompt_pat;
diff --git a/src/perl/url-mode-select b/src/perl/url-mode-select
new file mode 100644
index 00000000..d50c9df1
--- /dev/null
+++ b/src/perl/url-mode-select
@@ -0,0 +1,689 @@
+#! perl -w
+# Author: Navarum Eliskar
+# Based on: Bert Muennich, url-select
+#           http://www.github.com/muennich/urxvt-perls
+# Based on: http://www.jukie.net/~bart/blog/urxvt-url-yank
+# License:  GPLv2
+
+# Use keyboard shortcuts to select URLs.
+# This should be used as a replacement for the default matcher extension,
+# it also makes URLs clickable with the middle mouse button.
+
+# Usage: put the following lines in your .Xdefaults/.Xresources:
+#
+#  URxvt.perl-ext: url-mode-select,...
+#  URxvt.keysym.Mod1-u: perl:url-mode-select:activate
+#  URxvt.url-mode-select.launcher: clipboard-fake-launcher
+
+# Use Meta-u to activate URL selection mode, then use the following keys:
+#   j/k:      Select next downward/upward URL (also with arrow keys)
+#   g/G:      Select first/last URL (also with home/end key)
+#   o/Return: Open selected URL in browser, Return: deactivate afterwards
+#   y:        Copy (yank) selected URL and deactivate selection mode
+#   q/Escape: Deactivate URL selection mode
+
+use Carp;
+
+use warnings;
+use strict;
+
+use Data::Dump qw(dump);
+use File::Basename qw(dirname);
+
+# The custom rendition bit to use for marking the cell as being underlined
+# by us so we can unset it again after a line has changed.
+use constant UNDERLINED => 1<<3; # arbitrarily chosen in hope of no collision
+
+my $last_mode_file = "$ENV{HOME}/.urxvt/url-mode-select-last-mode";
+our $debug = 1;
+
+sub on_start {
+  my ($self) = @_;
+
+  # read resource settings
+  if ($self->x_resource('url-mode-select.launcher')) {
+    @{$self->{browser}} = split /\s+/, $self->x_resource('url-mode-select.launcher');
+  } else {
+    @{$self->{browser}} = ('x-www-browser');
+  }
+
+  $self->{state} = 0;
+
+  # for my $mod (split '', $self->x_resource("url-mode-select.button") || 2) {
+  #     if ($mod =~ /^\d+$/) {
+  #         $self->{button} = $mod;
+  #     } elsif ($mod eq "C") {
+  #         $self->{state} |= urxvt::ControlMask;
+  #     } elsif ($mod eq "S") {
+  #         $self->{state} |= urxvt::ShiftMask;
+  #     } elsif ($mod eq "M") {
+  #         $self->{state} |= $self->ModMetaMask;
+  #     } elsif ($mod ne "-" && $mod ne " ") {
+  #         warn("invalid button/modifier in $self->{_name}<$self->{argv}[0]>: $mod\n");
+  #     }
+  # }
+
+  ## NE 27 Oct 2015
+  my @perl_config_path =
+      ("$ENV{HOME}/.urxvt/ext/",
+       "$ENV{HOME}/.urxvt/",
+       dirname(__FILE__));
+  my $perl_config_name = "url-mode-patterns.pl";
+  my $perl_config;
+  for my $p (@perl_config_path) {
+    my $pn = $p."/".$perl_config_name;
+    if (-f $pn) { $perl_config=$pn; last; }
+  }
+  if ($perl_config) {
+#    warn "Reading custom config $perl_config\n";
+    my ($config) = do("$perl_config") or die "$@";
+    $self->{config} = $config;
+#    $debug = $self->{config}->{debug} || 0;
+
+    my @pats = @{$self->{config}->{mode_pats}};
+    $self->{mode_pats} = {@pats};
+    my @modes;
+    for my $i (0..$#pats) {
+      push @modes, $pats[$i] if !($i % 2);
+    }
+
+    $self->{all_modes} = \@modes;
+#    warn ("Modes: ",(join " ", @modes));
+    $self->{mode} = do { local(@ARGV, $/) = $last_mode_file; <> } ||
+        $modes[0];
+  } else {
+    die "Couldn't find pattern file in ".join(":",@perl_config_path);
+  }
+
+  ()
+}
+
+sub url_match {
+  if (defined $1) {
+    return ($1, $-[1], $+[1]);
+  } else {
+    return ($&, $-[0], $+[0]);
+  }
+}
+
+sub line_update {
+  my ($self, $row) = @_;
+
+  my $line = $self->get_linewrap($row);
+  my $text = $line->t;
+  my $rend = $line->r;
+
+  # clear all underlines that were set by us
+  for (@$rend) {
+    if (urxvt::GET_CUSTOM($_) & UNDERLINED) {
+      $_ = urxvt::SET_CUSTOM($_, urxvt::GET_CUSTOM($_) & ~UNDERLINED) &
+          ~urxvt::RS_Uline;
+    }
+  }
+
+  {
+    local $debug = 0;
+    for my $pattern (@{$self->{pattern}}) {
+      while ($text =~ /$pattern/g) {
+        #            my $url = $&;
+        #            my ($beg, $end) = ($-[0], $+[0] - 1);
+
+        my ($url, $beg, $end) = url_match;
+        $end--;
+
+        for (@{$rend}[$beg .. $end]) {
+          unless ($_ & urxvt::RS_Uline) {
+            $_ = urxvt::SET_CUSTOM($_, urxvt::GET_CUSTOM($_) | UNDERLINED);
+            $_ |= urxvt::RS_Uline;
+          }
+        }
+      }
+    }
+  }
+
+  # update the line
+  $line->r($rend);
+
+  ()
+}
+
+sub on_action {
+  my ($self, $action) = @_;
+
+  on_user_command($self, "url-mode-select:" . $action);
+}
+
+
+sub on_user_command {
+  my ($self, $cmd) = @_;
+  warn "url-mode-select: got command \"$cmd\"";
+
+  if ($cmd eq 'url-mode-select:activate') {
+    if (not $self->{active}) {
+      activate($self);
+#      select_next($self, -1);
+    }
+  }
+
+  ()
+}
+
+
+sub key_press {
+  my ($self, $event, $keysym) = @_;
+  my $char = chr($keysym);
+
+  if ($keysym == 0xff1b || lc($char) eq 'q' ||
+      (lc($char) eq 'c' && $event->{state} & urxvt::ControlMask)) {
+    # 1b == ESC
+    deactivate($self);
+  } elsif ($keysym == 0xff0d || $char eq 'o') {
+    # 0d == CR
+    $self->exec_async(@{$self->{browser}}, ${$self->{found}[$self->{n}]}[4]);
+    deactivate($self) unless $char eq 'o';
+  } elsif (my $new_mode=$self->{config}->{mode_keys}->{$char}) {
+    $self->set_mode($new_mode);
+  } elsif ($char eq 'y') {
+    my $found = $self->{found}[$self->{n}];
+    $self->selection_beg(${$found}[0], ${$found}[1]);
+    $self->selection_end(${$found}[2], ${$found}[3]);
+    $self->selection_make($event->{time});
+    $self->selection_beg(1, 0);
+    $self->selection_end(1, 0);
+    deactivate($self);
+
+    ## NE 06 Mar 2016 Added 'p' and 'n'
+  } elsif ($char eq 'k' || $char eq 'p' || $keysym == 0xff52 || $keysym == 0xff51) {
+    select_next($self, -1, $event);
+  } elsif ($char eq 'j' || $char eq 'n' || $keysym == 0xff54 || $keysym == 0xff53) {
+    select_next($self, 1, $event);
+
+
+  } elsif ($char eq 'g' || $keysym == 0xff50) {
+    $self->{row} = $self->top_row - 1;
+    delete $self->{found};
+    select_next($self, 1, $event);
+  } elsif ($char eq 'G' || $keysym == 0xff57) {
+    $self->{row} = $self->nrow-1;
+    delete $self->{found};
+    select_next($self, -1, $event);
+  }
+
+  return 1;
+}
+
+
+sub sort_and_filter_matches {
+  my (@found) = @_;
+
+  # sort by right-hand side of range, because we usually navigate from
+  # bottom of terminal
+  @found = sort {
+    $a->[2] <=> $b->[2] ||
+        $b->[1] <=> $a->[1] # prefer longer matches first
+  } @found;
+  #  @found = sort { $a->[1] <=> $b->[1] } @found;
+  my @ufound;
+  my %saw;
+  for my $f (@found) {
+    my $s = $f->[1]."-".$f->[2];
+    push @ufound, $f unless $saw{$s};
+    $saw{$s} = 1;
+  }
+  return @ufound;
+}
+
+sub get_line_matches {
+  my ($self, $line) = @_;
+  my @found=();
+  my $text = $line->t;
+  #        warn "text=\Q$text\E\n";
+  for my $pattern (@{$self->{pattern}}) {
+    while ($text =~ /$pattern/g) {
+      my ($url, $beg, $end) = url_match;
+      if($end>$beg) {
+
+        # we treat the end specially because the end column is 1+ the
+        # last character
+        my ($er,$ec) = $line->coord_of($end-1);
+        push @found, [$line->coord_of($beg),
+                      $er, $ec+1,
+                      substr($text, $beg, $end - $beg)];
+      } else {
+        if($debug) {
+          warn "Empty match in $text, $pattern\n";
+        }
+      }
+    }
+  }
+  return @found;
+}
+
+sub check_row {
+  my ($self)=@_;
+  confess "row too big" if $self->{row} >= $self->nrow;
+  confess "row too small" if $self->{row} < $self->top_row;
+}
+
+sub select_match_on_line {
+  my ($self,$line,$dir) = @_;
+  my @found=();
+  @found = $self->get_line_matches($line);
+
+  if(@found) {
+    @found = sort_and_filter_matches @found;
+    @{$self->{found}} = @found;
+    $self->{row} = $line->{beg};
+    $self->{n} = $dir < 0 ? $#found : 0;
+    hilight($self);
+    return 1;
+  }
+  return 0;
+}
+
+# $self->{n} = number of current match in @{$self->{found}}
+# $self->{row} = row containing current matches
+sub select_next {
+  # $dir < 0: up, > 0: down
+  my ($self, $dir, $event) = @_;
+
+  if(!defined($self->{found})) {
+    my $line = $self->get_linewrap($self->{row});
+    return if $self->select_match_on_line($line, 1);
+  }
+
+  my $row = $self->{row};
+  $self->check_row;
+
+  if (($dir < 0 && $self->{n} > 0) ||
+      ($dir > 0 && $self->{n} < $#{ $self->{found} })) {
+    # another url on current line
+    $self->{n} += $dir;
+    hilight($self);
+    return;
+  }
+
+  my $line = $self->get_linewrap($row);
+  while ($line->has_next_linewrap($dir)) {
+
+    $line = $line->next_linewrap($dir);
+
+    return if $self->select_match_on_line($line,$dir);
+  }
+
+  # nothing found, but update status area etc.
+  hilight($self);
+
+#  deactivate($self) unless $self->{found};
+
+  ()
+}
+
+
+sub hilight {
+  my ($self) = @_;
+
+  #  if ($self->{found}) {
+  if ($self->{row} < $self->view_start() ||
+      $self->{row} >= $self->view_start() + $self->nrow-1) {
+    # scroll selected url into visible area
+    my $top = $self->{row} - ($self->nrow >> 1);
+    $self->view_start($top < 0 ? $top : 0);
+    warn "Calling view_start, top=$top";
+  }
+
+  status_area($self);
+  # does the hilighting:
+  $self->want_refresh();
+  #  }
+
+  ()
+}
+
+
+sub refresh {
+  my ($self) = @_;
+
+#  if ($self->{found}) {
+#    $self->scr_xor_span(0,0,0,1, urxvt::RS_RVid);
+  $self->scr_xor_span(@{$self->{found}[$self->{n}]}[0 .. 3], urxvt::RS_RVid);
+
+  if(1) {
+    # debugging code: label wrapped lines
+    for my $r (0..($self->nrow-1)) {
+      if($self->line($r)->beg < $r) {
+        # if($self->is_row_full($r)) {
+        $self->scr_xor_span($r,0,$r,1, urxvt::RS_RVid);
+      }
+    }
+    #  }
+  }
+
+  if(1) {
+    my $l = $self->get_linewrap(0);
+    while(1) {
+      my @matches = $self->get_line_matches($l);
+      for my $m (@matches) {
+        $self->scr_xor_span(@$m[0 .. 3], urxvt::RS_Uline);
+      }
+      last if !$l->has_next_linewrap(1);
+      $l = $l->next_linewrap(1);
+    }
+  }
+
+
+  ()
+}
+
+
+sub status_area {
+  my ($self) = @_;
+
+  my $row = $self->{row} < 0 ?
+      $self->{row} - $self->top_row : abs($self->top_row) + $self->{row};
+  my $text = sprintf("%d,%d ", $row + 1, $self->{n} + 1);
+
+  if ($self->top_row == 0) {
+    $text .= "All";
+  } elsif ($self->view_start() == $self->top_row) {
+    $text .= "Top";
+  } elsif ($self->view_start() == 0) {
+    $text .= "Bot";
+  } else {
+    $text .= sprintf("%2d%%",
+                     ($self->top_row - $self->view_start) * 100 / $self->top_row);
+  }
+
+  $text .= "(".$self->{mode}.")";
+
+  my $text_len = length($text);
+
+  if ($self->{overlay_len} != $text_len) {
+    delete $self->{overlay} if $self->{overlay};
+    $self->{overlay} = $self->overlay(-1, -1, $text_len, 1,
+                                      urxvt::OVERLAY_RSTYLE, 0);
+    $self->{overlay_len} = $text_len;
+  }
+
+  $self->{overlay}->set(0, 0, $self->special_encode($text));
+  $self->{overlay}->show();
+
+  ()
+}
+
+
+sub tt_write {
+  return 1;
+}
+
+
+sub activate {
+  my ($self) = @_;
+
+  $self->{active} = 1;
+
+  $self->{row} = $self->view_start() + $self->nrow-1;
+  $self->{n} = 0;
+  $self->{overlay_len} = 0;
+  $self->{button_pressed} = 0;
+
+  $self->{view_start} = $self->view_start();
+  $self->{pty_ev_events} = $self->pty_ev_events(urxvt::EV_NONE);
+
+  $self->enable(
+    key_press     => \&key_press,
+    refresh_begin => \&refresh,
+    refresh_end   => \&refresh,
+    tt_write      => \&tt_write,
+      );
+
+  $self->set_mode($self->{mode});
+
+  ()
+}
+
+sub set_mode {
+  my ($self, $new_mode) = @_;
+
+  warn "set_mode: $new_mode\n" if $debug;
+
+  $self->{mode} = $new_mode;
+  open FILE, ">", $last_mode_file; print FILE $new_mode; close FILE;
+
+  $self->{pattern} = $self->{mode_pats}->{$new_mode};
+
+  delete $self->{found} if $self->{found};
+
+  $self->want_refresh();
+
+  select_next($self, -1);
+}
+
+sub deactivate {
+  my ($self) = @_;
+
+  $self->disable("key_press", "refresh_begin", "refresh_end", "tt_write");
+  $self->view_start($self->{view_start});
+  $self->pty_ev_events($self->{pty_ev_events});
+
+  delete $self->{overlay} if $self->{overlay};
+  delete $self->{found} if $self->{found};
+
+  $self->want_refresh();
+
+  $self->{active} = 0;
+
+  ()
+}
+
+sub is_row_full;
+
+# # copied from rxvt-unicode-9.21/src/urxvt.pm:1790
+# # originally "sub line"
+# sub multiline {
+#   my ($self, $row) = @_;
+
+#   my $maxrow = $self->nrow - 1;
+
+#   my ($beg, $end) = ($row, $row);
+
+#   my $ncol = $self->ncol;
+
+#   confess if !defined($row);
+#   confess if !defined($self);
+#   confess "No ncol" if !defined($ncol);
+#   if($end>$maxrow) {
+#     $end=$maxrow;
+#   }
+
+#   ################################################################
+#   # NE 07 Sep 2015
+
+#   # Change the definition of extended lines to work with curses
+#   # applications. We could also do this by changing ROW_is_longer in
+#   # the urxvt core, not sure what that would affect
+
+#   # --$beg while $self->ROW_is_longer ($beg - 1);
+#   # ++$end while $self->ROW_is_longer ($end) && $end < $maxrow;
+
+#   # --$beg while $beg>0 && $self->ROW_l($beg-1) == $ncol;
+#   # ++$end while $end < $maxrow && $self->ROW_l($end) == $ncol;
+#   --$beg while $beg>0 && is_row_full($self,$beg-1);
+#   ++$end while $end < $maxrow && is_row_full($self,$end);
+#   # --$beg while $self->ROW_l($beg-1) == $ncol && $self->line($beg-1)->t !~ /\s$/;
+#   # ++$end while $end < $maxrow && $self->ROW_l($end) == $ncol && $self->line($end)->t !~ /\s$/;
+#   ################################################################
+
+#   bless {
+#     term => $self,
+#     beg  => $beg,
+#     end  => $end,
+#     ncol => $self->ncol,
+#     len  => ($end - $beg) * $self->ncol + $self->ROW_l ($end),
+#   }, urxvt::line::
+# }
+
+################################################################
+
+# structure of a linewrap
+# {
+#   term,
+#   beg, end, # row numbers
+#   extents, # array of [[start_col, end_col], ...]
+#   text, # concatenated text, for matching
+# }
+
+sub is_row_full {
+  my ($self, $row) = @_;
+  my $ncol = $self->ncol;
+  confess "row too big" if $row >= $self->nrow;
+  confess "row too small" if $row < $self->top_row;
+#  my $text = $self->ROW_t($row);
+  my $text = $self->line($row)->t;
+  if(length($text)>0 &&
+    (length($text) % $ncol)==0 &&
+     $text !~ /\s\s$/) {
+    # warn "Row $row is full:\n";
+    # warn ("|",$self->line($row)->t,"|\n");
+    return 1;
+  }
+  return 0;
+}
+
+sub linewrap_backup_row {
+  my ($self, $row) = @_;
+  my $beg = $self->line($row)->beg;
+  while($beg > $self->top_row && is_row_full($self,$beg-1)) {
+    if($debug>1) {
+      warn "Row before $beg was full, backing up";
+    }
+    $beg--;
+  }
+  return $beg;
+}
+
+# predeclare the package so we can bless into it
+{package linewrap;}
+
+sub get_linewrap {
+  my ($self, $row) = @_;
+  my $beg = linewrap_backup_row($self, $row);
+  $row = $beg-1;
+  my @extents;
+  my $text;
+  my $full;
+  my $wrap;
+  do {
+    $row++;
+    my $l = $self->line($row);
+    if($l->beg < $row) {
+      warn "Wrapped line, skipping row $row";
+      if(!$wrap) {
+        # sometimes urxvt thinks that a line is wrapped, if the next
+        # line is empty. otherwise we should only get here after the
+        # "$wrap=1" statement below
+        if(length($l->t) != $self->ncol) {
+          die "confused: row=$row, beg=".$l->beg.", \$l->t=".$l->t;
+        }
+      }
+      push @extents, [0, -1];
+      $wrap = ($l->end > $row);
+    } else {
+      my $t = $l->t;
+      $full = is_row_full($self,$row);
+      if(length($t)>$self->ncol) {
+        $wrap=1;
+      } else {
+        $wrap=0;
+        if($self->ROW_l($row)==$self->ncol) {
+          if(!$full) {
+            $t =~ s/\s+$//;
+          } elsif($t=~/\\$/) {
+            # handle emacs line wraps
+            $t =~ s/\\$//;
+          }
+        }
+      }
+      push @extents, [0, length($t)-1];
+      $text .= $t;
+    }
+  } while($wrap || ($full && ($row<$self->nrow-1)));
+  my $end=$row;
+
+  bless {
+    term => $self,
+    beg => $beg,
+    end => $end,
+    extents => \@extents,
+    text => $text
+  }, linewrap::
+}
+
+package linewrap;
+
+sub has_next_linewrap {
+  my ($line, $dir) = @_;
+  my $self = $line->{term};
+  return (($dir < 0 && $line->{beg} > $self->top_row) ||
+          ($dir > 0 && $line->{end} < $self->nrow - 1))
+}
+
+sub next_linewrap {
+  my ($line, $dir) = @_;
+  my $term = $line->{term};
+  if($dir<0) {
+    $term->get_linewrap($line->{beg}-1);
+  } elsif($dir>0) {
+    $term->get_linewrap($line->{end}+1);
+  } else { die }
+}
+
+sub coord_of {
+  my ($self, $pos)=@_;
+  my $i=0;
+  for my $r ($self->{beg}..$self->{end}) {
+    my ($sc,$ec) = @{${$self->{extents}}[$i]};
+    if($pos<=($ec-$sc)) {
+      return $self->{term}->line($r)->coord_of($pos+$sc);
+#      return ($r, $pos+$sc);
+    }
+    $pos-=($ec-$sc)+1;
+    $i++;
+  }
+  die "error in coord_of";
+}
+
+# can't change text for now
+sub t {
+  my ($self) = @_;
+  return $self->{text};
+}
+
+# get or replace renderings of linewrap
+sub r {
+  my ($self, $new_rend) = @_;
+  if(defined($new_rend)) {
+    my @rends = @$new_rend;
+    my $i=0;
+    my $k=0;
+    for my $l ($self->{beg}..$self->{end}) {
+      my ($sc,$ec) = @{${$self->{extents}}[$i]};
+      my $r = $self->{term}->line($l)->r();
+      @{$r}[$sc..$ec] = @rends[$k..($k+$ec-$sc)];
+      $k=$k+$ec-$sc+1;
+      $i++;
+    }
+  } else {
+    my @rends;
+    my $i=0;
+    for my $l ($self->{beg}..$self->{end}) {
+      my $r = $self->{term}->line($l)->r();
+      my ($sc,$ec) = @{${$self->{extents}}[$i]};
+      push @rends, @{$r}[$sc..$ec];
+      $i++;
+    }
+    return \@rends;
+  }
+}
+
+1;
-- 
2.24.1

